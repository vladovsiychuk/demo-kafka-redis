// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	datastore "github/vladovsiychuk/demo-kafkaredis-diff/internal/datastore"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Store) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, partner, date
func (_m *Store) Get(ctx context.Context, partner string, date string) (*datastore.State, error) {
	ret := _m.Called(ctx, partner, date)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *datastore.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*datastore.State, error)); ok {
		return rf(ctx, partner, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *datastore.State); ok {
		r0 = rf(ctx, partner, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partner, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, partner, date, state
func (_m *Store) Set(ctx context.Context, partner string, date string, state *datastore.State) error {
	ret := _m.Called(ctx, partner, date, state)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *datastore.State) error); ok {
		r0 = rf(ctx, partner, date, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
