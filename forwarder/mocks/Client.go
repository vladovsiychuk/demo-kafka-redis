// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	reporter "justtrack.io/tests/backend/forwarder/internal/reporter"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, partner, date
func (_m *Client) Fetch(ctx context.Context, partner string, date string) (*reporter.Data, error) {
	ret := _m.Called(ctx, partner, date)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 *reporter.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*reporter.Data, error)); ok {
		return rf(ctx, partner, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *reporter.Data); ok {
		r0 = rf(ctx, partner, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reporter.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partner, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
